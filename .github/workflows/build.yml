on:
  push:
    branches: [ main ]
  pull_request:
    branches:
      - main

# Cancel previous jobs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

name: Build

env:
  CARGO_TERM_COLOR: always
  SLANG_VERSION: v2025.17.2

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install build dependencies
        run: sudo apt install libasound2-dev nasm

      - name: Cache slangc
        id: cache-slangc
        uses: actions/cache@v4
        with:
          path: ~/slangc
          key: ${{ runner.os }}-slangc-${{ env.SLANG_VERSION }}

      - name: Download and install slangc
        if: steps.cache-slangc.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/slangc
          cd ~/slangc
          
          VERSION_NO_V=${SLANG_VERSION#v}
          curl -L -o slang-linux-x86_64.tar.gz \
            "https://github.com/shader-slang/slang/releases/download/${{ env.SLANG_VERSION }}/slang-${VERSION_NO_V}-linux-x86_64.tar.gz"
          
          tar -xzf slang-linux-x86_64.tar.gz
          rm slang-linux-x86_64.tar.gz
          
          chmod +x bin/slangc bin/slangd

      - name: Add slangc to PATH
        run: echo "$HOME/slangc/bin" >> $GITHUB_PATH

      - name: Verify slangc installation
        run: |
          which slangc
          slangc -version

      - name: Add problem matchers
        run: echo "::add-matcher::.github/workflows/build-matchers.json"

      - name: Build Korangar (release)
        run: cargo build

      - name: Build Korangar (debug)
        run: cargo build --features "debug"

      - name: Generate ragnarok-packets.json (for bindgen)
        run: cargo rustdoc -p ragnarok-packets -- -Z unstable-options --output-format json

      - name: Save ragnarok-packets.json as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ragnarok-packets.json
          path: target/doc/ragnarok_packets.json

  build-nix-dev-shell:
    name: Build Nix devShell
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Build devShell
        run: nix develop -L
